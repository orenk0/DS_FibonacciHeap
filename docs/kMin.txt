Complexity: O(K*deg(root))
Description: Similarly to binary heaps we will maintain a second minor Fibonacci-Heap. In order to access the corresponding node in the main Fibonacci-Heap we save a reference pointer to it. Because we know that the minimum is the root=r; the 2nd largest is a son of the root - say x; The 3rd is a son of x or r and so on. We can insert to the minor Fibonacci-Heap each new minimum's sons we might find, and delete this minimum. We know deg(node)<deg(root):=H. Therefore, everytime, we insert at most H nodes which is H*O(1)=O(H), and delete from a Heap with at most H*K nodes which is O(log(H*K))=O(log(H)+log(K)). Since K<n the number of nodes, we obtain: log(K)<=log(n)=deg(root)=H (last transition is due to the binomial tree property). Hence, we'll perform a sequence of K moves. Each move costs O(H) WC. Overall O(H)*K=O(HK)=O(K*deg(root)). Needless to say, everytime we delete a minimum we insert it to the final result array which costs O(1)*K=O(K).
